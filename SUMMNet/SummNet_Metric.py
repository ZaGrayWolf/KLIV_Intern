import torch
import torch.nn as nn
import torch.nn.functional as F

class SUMNet_all_bn(nn.Module):
    def __init__(self, in_ch, out_ch):
        super(SUMNet_all_bn, self).__init__()
        
        self.conv1     = nn.Conv2d(in_ch, 64, 3, padding=1)
        self.bn1       = nn.BatchNorm2d(64, eps=1e-5, momentum=0.1, affine=True, track_running_stats=True)
        self.conv2     = nn.Conv2d(64, 128, 3, padding=1)   
        self.bn2       = nn.BatchNorm2d(128, eps=1e-5, momentum=0.1, affine=True, track_running_stats=True)
        self.pool1     = nn.MaxPool2d(2, 2, padding=1, return_indices=True)
        self.conv3a    = nn.Conv2d(128, 256, 3, padding=1) 
        self.bn3a      = nn.BatchNorm2d(256, eps=1e-5, momentum=0.1, affine=True, track_running_stats=True)
        self.conv3b    = nn.Conv2d(256, 256, 3, padding=1)
        self.bn3b      = nn.BatchNorm2d(256, eps=1e-5, momentum=0.1, affine=True, track_running_stats=True)
        self.pool2     = nn.MaxPool2d(2, 2, padding=1, return_indices=True)
        self.conv4a    = nn.Conv2d(256, 512, 3, padding=1) 
        self.bn4a      = nn.BatchNorm2d(512, eps=1e-5, momentum=0.1, affine=True, track_running_stats=True)
        self.conv4b    = nn.Conv2d(512, 512, 3, padding=1)
        self.bn4b      = nn.BatchNorm2d(512, eps=1e-5, momentum=0.1, affine=True, track_running_stats=True)
        self.pool3     = nn.MaxPool2d(2, 2, padding=1, return_indices=True)
        self.conv5a    = nn.Conv2d(512, 512, 3, padding=1) 
        self.bn5a      = nn.BatchNorm2d(512, eps=1e-5, momentum=0.1, affine=True, track_running_stats=True)
        self.conv5b    = nn.Conv2d(512, 512, 3, padding=1)
        self.bn5b      = nn.BatchNorm2d(512, eps=1e-5, momentum=0.1, affine=True, track_running_stats=True)
        self.pool4     = nn.MaxPool2d(2, 2, padding=1, return_indices=True)
        
        self.unpool4   = nn.MaxUnpool2d(2, 2)
        self.donv5b    = nn.Conv2d(1024, 512, 3, padding=1)
        self.dbn5b     = nn.BatchNorm2d(512, eps=1e-5, momentum=0.1, affine=True, track_running_stats=True)
        self.donv5a    = nn.Conv2d(512, 512, 3, padding=1)
        self.dbn5a     = nn.BatchNorm2d(512, eps=1e-5, momentum=0.1, affine=True, track_running_stats=True)
        self.unpool3   = nn.MaxUnpool2d(2, 2)
        self.donv4b    = nn.Conv2d(1024, 512, 3, padding=1)
        self.dbn4b     = nn.BatchNorm2d(512, eps=1e-5, momentum=0.1, affine=True, track_running_stats=True)
        self.donv4a    = nn.Conv2d(512, 256, 3, padding=1)
        self.dbn4a     = nn.BatchNorm2d(256, eps=1e-5, momentum=0.1, affine=True, track_running_stats=True)
        self.unpool2   = nn.MaxUnpool2d(2, 2)
        self.donv3b    = nn.Conv2d(512, 256, 3, padding=1)
        self.dbn3b     = nn.BatchNorm2d(256, eps=1e-5, momentum=0.1, affine=True, track_running_stats=True)
        self.donv3a    = nn.Conv2d(256, 128, 3, padding=1)
        self.dbn3a     = nn.BatchNorm2d(128, eps=1e-5, momentum=0.1, affine=True, track_running_stats=True)
        self.unpool1   = nn.MaxUnpool2d(2, 2)
        self.donv2     = nn.Conv2d(256, 64, 3, padding=1)
        self.dbn2      = nn.BatchNorm2d(64, eps=1e-5, momentum=0.1, affine=True, track_running_stats=True)
        self.donv1     = nn.Conv2d(128, 32, 3, padding=1)
        self.dbn1      = nn.BatchNorm2d(32, eps=1e-5, momentum=0.1, affine=True, track_running_stats=True)
        self.output    = nn.Conv2d(32, out_ch, 1)        
    
    def forward(self, x):
        # Encoder
        conv1 = F.relu(self.bn1(self.conv1(x)), inplace=True)
        print("conv1:", conv1.shape)
        conv2 = F.relu(self.bn2(self.conv2(conv1)), inplace=True)
        print("conv2:", conv2.shape)
        pool1, idxs1 = self.pool1(conv2)
        print("pool1:", pool1.shape)
        
        conv3a = F.relu(self.bn3a(self.conv3a(pool1)), inplace=True)
        print("conv3a:", conv3a.shape)
        conv3b = F.relu(self.bn3b(self.conv3b(conv3a)), inplace=True)
        print("conv3b:", conv3b.shape)
        pool2, idxs2 = self.pool2(conv3b)
        print("pool2:", pool2.shape)
        
        conv4a = F.relu(self.bn4a(self.conv4a(pool2)), inplace=True)
        print("conv4a:", conv4a.shape)
        conv4b = F.relu(self.bn4b(self.conv4b(conv4a)), inplace=True)
        print("conv4b:", conv4b.shape)
        pool3, idxs3 = self.pool3(conv4b)
        print("pool3:", pool3.shape)
        
        conv5a = F.relu(self.bn5a(self.conv5a(pool3)), inplace=True)
        print("conv5a:", conv5a.shape)
        conv5b = F.relu(self.bn5b(self.conv5b(conv5a)), inplace=True)
        print("conv5b:", conv5b.shape)
        pool4, idxs4 = self.pool4(conv5b)
        print("pool4:", pool4.shape)
        
        # Decoder
        unpool4 = self.unpool4(pool4, idxs4)
        print("unpool4:", unpool4.shape)
        conv5b_resized = F.interpolate(conv5b, size=unpool4.shape[2:], mode='bilinear', align_corners=True)
        unpool4_concat = torch.cat([unpool4, conv5b_resized], 1)
        print("unpool4 + concat:", unpool4_concat.shape)
        donv5b = F.relu(self.dbn5b(self.donv5b(unpool4_concat)), inplace=True)
        print("donv5b:", donv5b.shape)
        donv5a = F.relu(self.dbn5a(self.donv5a(donv5b)), inplace=True)
        print("donv5a:", donv5a.shape)
        
        # Resize donv5a to match the size of idxs3
        donv5a_resized = F.interpolate(donv5a, size=idxs3.shape[2:], mode='bilinear', align_corners=True)
        unpool3 = self.unpool3(donv5a_resized, idxs3)
        print("unpool3:", unpool3.shape)
        conv4b_resized = F.interpolate(conv4b, size=unpool3.shape[2:], mode='bilinear', align_corners=True)
        unpool3_concat = torch.cat([unpool3, conv4b_resized], 1)
        print("unpool3 + concat:", unpool3_concat.shape)
        donv4b = F.relu(self.dbn4b(self.donv4b(unpool3_concat)), inplace=True)
        print("donv4b:", donv4b.shape)
        donv4a = F.relu(self.dbn4a(self.donv4a(donv4b)), inplace=True)
        print("donv4a:", donv4a.shape)
        
        unpool2 = self.unpool2(donv4a, idxs2)
        print("unpool2:", unpool2.shape)
        conv3b_resized = F.interpolate(conv3b, size=unpool2.shape[2:], mode='bilinear', align_corners=True)
        unpool2_concat = torch.cat([unpool2, conv3b_resized], 1)
        print("unpool2 + concat:", unpool2_concat.shape)
        donv3b = F.relu(self.dbn3b(self.donv3b(unpool2_concat)), inplace=True)
        print("donv3b:", donv3b.shape)
        donv3a = F.relu(self.dbn3a(self.donv3a(donv3b)), inplace=True)
        print("donv3a:", donv3a.shape)
        
        unpool1 = self.unpool1(donv3a, idxs1)
        print("unpool1:", unpool1.shape)
        conv2_resized = F.interpolate(conv2, size=unpool1.shape[2:], mode='bilinear', align_corners=True)
        unpool1_concat = torch.cat([unpool1, conv2_resized], 1)
        print("unpool1 + concat:", unpool1_concat.shape)
        donv2 = F.relu(self.dbn2(self.donv2(unpool1_concat)), inplace=True)
        print("donv2:", donv2.shape)
        conv1_resized = F.interpolate(conv1, size=donv2.shape[2:], mode='bilinear', align_corners=True)
        donv1 = F.relu(self.dbn1(self.donv1(torch.cat([donv2, conv1_resized], 1))), inplace=True)
        print("donv1:", donv1.shape)
        
        output = self.output(donv1)
        print("output:", output.shape)
        
        return output

if __name__ == "__main__":
    input_tensor = torch.randn(1, 3, 2560, 1440)
    model = SUMNet_all_bn(in_ch=3, out_ch=1)
    output = model(input_tensor)